openapi: 3.0.3
info:
  contact:
    email: korotkov.ivan.s@gmail.com
    name: Ivan Korotkov
    url: https://github.com/iskorotkov
  title: API for user admin panel
  version: '1.0'
servers:
  - description: Local development server
    url: http://localhost:8080/api/v1
  - description: Production server (not working for obvious reasons)
    url: https://user-admin-panel-backend:8443/api/v1
paths:
  /users:
    get:
      description: Retrieve list of all users
      operationId: All
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/User'
                type: array
          description: Ok
      tags:
        - users
    post:
      description: Create a new user
      operationId: Create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: User created successfully
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: One of the user fields is invalid
      tags:
        - users
  /users/{id}:
    delete:
      description: Delete an existing user
      operationId: Delete
      parameters:
        - description: Unique user id
          explode: false
          in: path
          name: id
          required: true
          schema:
            format: uint
            type: integer
          style: simple
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: User deleted successfully
      tags:
        - users
    get:
      description: Retrieve user by id
      operationId: Single
      parameters:
        - description: Unique user id
          explode: false
          in: path
          name: id
          required: true
          schema:
            format: uint
            type: integer
          style: simple
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: Ok
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: User not found
      tags:
        - users
    put:
      description: Update an existing user
      operationId: Update
      parameters:
        - description: Unique user id
          explode: false
          in: path
          name: id
          required: true
          schema:
            format: uint
            type: integer
          style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: User updated successfully
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: User created successfully
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: One of the user fields is invalid
      tags:
        - users
components:
  schemas:
    Error:
      required: [code, message, errors]
      properties:
        code:
          description: 'Unique error code is useful for differentiating different types of errors. Error code is globally unique and permanent, meaning that it will never change even if the error message changes'
          format: int
          title: Unique error code
          type: integer
        message:
          format: string
          title: Human readable message describing error in general
          type: string
        errors:
          items:
            format: string
            type: string
          title: List of errors
          type: array
      title: Generic API error
      type: object
    NewUser:
      discriminator:
        propertyName: type
      example:
        gender: male
        phone: phone
        name: name
        email: email
      properties:
        name:
          format: string
          title: User given name
          type: string
        phone:
          format: string
          title: User phone number
          type: string
        email:
          format: string
          title: User email address
          type: string
        gender:
          description: "We have more than 2 options for genders as some users won't be comfortable specifying their gender, and some users define themselves as non-binary"
          enum:
            - male
            - female
            - other
            - unspecified
          title: User gender
          type: string
      required:
        - email
        - gender
        - name
        - phone
      title: New user that wasn't created yet and doesn't have an unique ID
      type: object
    User:
      allOf:
        - $ref: '#/components/schemas/NewUser'
        - $ref: '#/components/schemas/UserID'
      title: Already created user with assigned unique ID
      type: object
    UserID:
      properties:
        id:
          format: uint
          title: Internal unique user identifier
          type: integer
      required:
        - id
      title: UserID
      type: object
